const typeFunctions = require('./typeFunctions');
const genericDiff = require('./genericDiff');


var StructDiff = (function() {
    function StructDiff(orignalStruct, changedStruct, filter) {
        this._orignalStruct = orignalStruct;
        this._changedStruct = changedStruct;
        this._filter = filter || {};
    }


    function getChangedFields(orignalStruct, changedStruct, filter) {
        const change = {};
        let isFilterApplied = false;
        if (filter && typeFunctions.isObject(filter) && !typeFunctions.isEmpty(filter)) {
            isFilterApplied = true;
        }
        for (const key in orignalStruct) {
            if (orignalStruct.hasOwnProperty(key) &&
                (
                    !isFilterApplied ||
                    (isFilterApplied && filter.hasOwnProperty(key) && filter[key])
                )
            ) {
                if (!changedStruct.hasOwnProperty(key)) {
                    change[key] = genericDiff.getDiff(orignalStruct[key], undefined);
                    continue;
                }
                if (typeFunctions.isObject(orignalStruct[key])) {
                    const internalChanges = getChangedFields(orignalStruct[key], changedStruct[key], filter[key]);
                    if (!typeFunctions.isEmpty(internalChanges)) {
                        change[key] = internalChanges;
                    }
                    continue;
                }
                if (typeFunctions.isArray(orignalStruct[key]) &&
                    orignalStruct[key].length > 0 &&
                    typeFunctions.isObject(orignalStruct[key][0]) &&
                    typeFunctions.isArray(changedStruct[key]) &&
                    changedStruct[key].length > 0 &&
                    typeFunctions.isObject(changedStruct[key][0])) {
                    for (let it = 0; it < orignalStruct[key].length; it++) {
                        if (changedStruct[key].length > it) {
                            const objKey = key + "." + it;
                            if (!typeFunctions.compareValues(orignalStruct[key][it], changedStruct[key][it])) {
                                change[objKey] = getChangedFields(orignalStruct[key][it], changedStruct[key][it], {});
                            }
                        }
                    }
                    if (changedStruct[key].length > orignalStruct[key].length) {
                        for (let it = orignalStruct[key].length; it < changedStruct[key].length; it++) {
                            const objKey = key + "." + it;
                            change[objKey] = genericDiff.getDiff(undefined, changedStruct[key][it]);
                        }
                    } else if (changedStruct[key].length < orignalStruct[key].length) {
                        for (let it = changedStruct[key].length; it < orignalStruct[key].length; it++) {
                            const objKey = key + "." + it;
                            change[objKey] = genericDiff.getDiff(changedStruct[key][it], undefined);
                        }
                    }
                    continue;
                }
                if (!typeFunctions.compareValues(orignalStruct[key], changedStruct[key])) {
                    change[key] = genericDiff.getDiff(orignalStruct[key], changedStruct[key]);
                }
            }
        }
        for (const key in changedStruct) {
            if (changedStruct.hasOwnProperty(key) &&
                (
                    !isFilterApplied ||
                    (isFilterApplied && filter.hasOwnProperty(key) && filter[key])
                )
            ) {
                if (!orignalStruct.hasOwnProperty(key)) {
                    change[key] = genericDiff.getDiff(undefined, changedStruct[key]);
                }
            }
        }
        return change;
    }

    StructDiff.prototype.getStructDiff = function() {
        if (!typeFunctions.isObject(this._orignalStruct) || !typeFunctions.isObject(this._changedStruct)) {
            return {};
        }
        return getChangedFields(this._orignalStruct, this._changedStruct, this._filter);
    };

    return StructDiff;
})();

module.exports = StructDiff;